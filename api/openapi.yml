openapi: '3.0.2'
info:
  version: 1.0.0
  title: Project Danger API
  description: Public API spec for Project Danger
  contact:
    name: Project Danger Team
    email: info@bonkeybong.com
    url: http://www.bonkeybong.com
servers:
  - url: http://localhost:3001
paths:
  /projects:
    get:
      description: |
        Returns all projects that the user has access to
      operationId: findProjects
      responses:
        '200':
          description: projects response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new project
      operationId: addProject
      requestBody:
        description: Project to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProject'
      responses:
        '201':
          description: project response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{id}:
    get:
      description: Returns a project based on a single ID
      operationId: findProjectById
      parameters:
        - name: id
          in: path
          description: ID of project to fetch
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: project response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a project based on a single ID - full or partial update
      operationId: updateProject
      parameters:
        - name: id
          in: path
          description: ID of project to update
          required: true
          schema:
            type: integer

      requestBody:
        description: Project body to update - allows partial field update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProject'
      responses:
        '200':
          description: project response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      description: deletes a single project based on the ID supplied
      operationId: deleteProject
      parameters:
        - name: id
          in: path
          description: ID of project to delete
          required: true
          schema:
            type: integer

      responses:
        '204':
          description: project deleted
        default:
          description: unexpbected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{projectId}/documents:
    get:
      description: |
        Returns all documents that the user has access to for the given project id
      operationId: findDocuments
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: documents response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new document
      operationId: addDocument
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer

      requestBody:
        description: document to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDocument'
      responses:
        '201':
          description: document response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectId}/documents/{id}:
    get:
      description: Returns a document based on a single ID
      operationId: findDocumentById
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of document to fetch
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: document response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a project based on a single ID - full or partial update
      operationId: updateProject
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of project to update
          required: true
          schema:
            type: integer

      requestBody:
        description: Document body to update - allows partial field update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDocument'
      responses:
        '200':
          description: document response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single document based on the ID supplied
      operationId: deleteDocument
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of project to delete
          required: true
          schema:
            type: integer

      responses:
        '204':
          description: document deleted
        default:
          description: unexpbected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents/{documentId}/fields:
    get:
      description: |
        Returns all fields that the user has access to for the given project/document ids
      operationId: findDocuments
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: fields response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new field
      operationId: addField
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer

      requestBody:
        description: field to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewField'
      responses:
        '201':
          description: field response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /documents/{documentId}/fields/{id}:
    get:
      description: Returns a field based on a single ID
      operationId: findFieldById
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of field to fetch
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: project response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a field based on a single ID - full or partial update
      operationId: updateField
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of field to update
          required: true
          schema:
            type: integer

      requestBody:
        description: Field body to update - allows partial field update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewField'
      responses:
        '200':
          description: field response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      description: deletes a single field based on the ID supplied
      operationId: deleteField
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of field to delete
          required: true
          schema:
            type: integer

      responses:
        '204':
          description: field deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Project:
      allOf:
        - $ref: '#/components/schemas/NewProject'
        - required:
            - id
          properties:
            id:
              type: integer
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    NewProject:
      required:
        - name
      properties:
        name:
          type: string

    Document:
      allOf:
        - $ref: '#/components/schemas/NewDocument'
        - required:
            - id
          properties:
            id:
              type: integer
            projectId:
              type: integer
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    NewDocument:
      required:
        - name
      properties:
        name:
          type: string

    Field:
      allOf:
        - $ref: '#/components/schemas/NewField'
        - required:
            - id
          properties:
            id:
              type: integer
            docId:
              type: integer
            type:
              type: integer
            value:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    NewField:
      oneOf:
        - $ref: '#/components/schemas/StringField'
        - $ref: '#/components/schemas/TextField'
        - $ref: '#/components/schemas/NumberField'

    StringField:
      required:
          - name
          - type
          - value
      properties:
        name:
          type: string
        type:
          type: integer
          enum: [1]
        value:
          type: string

    TextField:
      required:
        - name
        - type
        - value
      properties:
        name:
          type: string
        type:
          type: integer
          enum: [2]
        value:
          type: string
        structuredValue:
          type: string

    NumberField:
      required:
          - name
          - type
          - value
      properties:
        name:
          type: string
        type:
          type: integer
          enum: [3]
        value:
          type: integer

    Error:
      required:
        - code
        - message
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
