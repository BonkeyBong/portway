openapi: '3.0.2'
info:
  version: 1.0.0
  title: Portway API
  description: Public API spec for Portway
  contact:
    name: Portway Team
    email: info@bonkeybong.com
    url: http://www.bonkeybong.com
servers:
  - url: http://localhost:3001
paths:
  /projects:
    get:
      description: |
        Returns all projects that the user has access to
      operationId: findProjects
      responses:
        '200':
          description: projects response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new project
      operationId: addProject
      requestBody:
        description: Project to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProject'
      responses:
        '201':
          description: project response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{id}:
    get:
      description: Returns a project based on a single ID
      operationId: findProjectById
      parameters:
        - name: id
          in: path
          description: ID of project to fetch
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: project response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a project based on a single ID - full or partial update
      operationId: updateProject
      parameters:
        - name: id
          in: path
          description: ID of project to update
          required: true
          schema:
            type: integer

      requestBody:
        description: Project body to update - allows partial field update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProject'
      responses:
        '200':
          description: project response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      description: deletes a single project based on the ID supplied
      operationId: deleteProject
      parameters:
        - name: id
          in: path
          description: ID of project to delete
          required: true
          schema:
            type: integer

      responses:
        '204':
          description: project deleted
        default:
          description: unexpbected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{projectId}/documents:
    get:
      description: |
        Returns all documents that the user has access to for the given project id
      operationId: findDocuments
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: documents response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new document
      operationId: addDocument
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer

      requestBody:
        description: document to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDocument'
      responses:
        '201':
          description: document response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectId}/documents/{id}:
    get:
      description: Returns a document based on a single ID
      operationId: findDocumentById
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of document to fetch
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: document response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a document based on a single ID - full or partial update
      operationId: updateDocument
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of document to update
          required: true
          schema:
            type: integer

      requestBody:
        description: Document body to update - allows partial field update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocument'
      responses:
        '200':
          description: document response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single document based on the ID supplied
      operationId: deleteDocument
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of project to delete
          required: true
          schema:
            type: integer

      responses:
        '204':
          description: document deleted
        default:
          description: unexpbected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{projectId}/assignments:
    get:
      description: |
        Returns all project user assignments
      operationId: findProjectUsers
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: project user assignments response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectUser'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new project user assignment
      operationId: addProjectUser
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer

      requestBody:
        description: project user to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProjectUser'
      responses:
        '201':
          description: project user assignment response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProjectUser'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{projectId}/assignments/{id}:
    get:
      description: Returns a project user assignment based on a single ID
      operationId: findProjectUserById
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of project user assignment to fetch
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: project user assignment response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProjectUser'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a project user assignment based on a single ID
      operationId: updateProjectUser
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of project to update
          required: true
          schema:
            type: integer

      requestBody:
        description: Project User assignment body to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectUser'
      responses:
        '200':
          description: project user assignment response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProjectUser'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single project user assignment based on the ID supplied
      operationId: deleteProjectUser
      parameters:
        - name: projectId
          in: path
          description: ID of parent project
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of project user assignment to delete
          required: true
          schema:
            type: integer

      responses:
        '204':
          description: project user assignment deleted
        default:
          description: unexpbected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /documents/{documentId}/fields:
    get:
      description: |
        Returns all fields that the user has access to for the given project/document ids
      operationId: findFields
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: fields response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Field'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new field
      operationId: addField
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer

      requestBody:
        description: field to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewField'
            example:
              name: field name
              value: 808
              type: 3
      responses:
        '201':
          description: field response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Field'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /documents/{documentId}/fields/{id}:
    get:
      description: Returns a field based on a single ID
      operationId: findFieldById
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of field to fetch
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: project response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Field'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Update a field based on a single ID - full or partial update
      operationId: updateField
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of field to update
          required: true
          schema:
            type: integer

      requestBody:
        description: Field body to update - allows partial field update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateField'
            example:
              name: 'new name'
              value: 'new value'
      responses:
        '200':
          description: field response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Field'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      description: deletes a single field based on the ID supplied
      operationId: deleteField
      parameters:
        - name: documentId
          in: path
          description: ID of parent document
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: ID of field to delete
          required: true
          schema:
            type: integer

      responses:
        '204':
          description: field deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Project:
      allOf:
        - $ref: '#/components/schemas/NewProject'
        - required:
            - id
        - properties:
            id:
              type: integer
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    NewProject:
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    UpdateProject:
      properties:
        name:
          type: string
        description:
          type: string

    Document:
      allOf:
        - $ref: '#/components/schemas/NewDocument'
        - required:
            - id
            - projectId
        - properties:
            id:
              type: integer
            projectId:
              type: integer
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    NewDocument:
      required:
        - name
      properties:
        name:
          type: string

    UpdateDocument:
      properties:
        name:
          type: string

    Field:
      allOf:
        - required:
            - id
            - name
            - documentId
            - type
        - properties:
            id:
              type: integer
            name:
              type: string
            documentId:
              type: integer
            type:
              type: integer
            value:
              type: string
            structuredValue:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    NewField:
      oneOf:
        - $ref: '#/components/schemas/StringField'
        - $ref: '#/components/schemas/TextField'
        - $ref: '#/components/schemas/NumberField'

    UpdateField:
      properties:
        name:
          type: string
        value:
          oneOf:
            - type: string
            - type: number

    StringField:
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: integer
          enum: [1]
        value:
          type: string

    TextField:
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: integer
          enum: [2]
        value:
          type: string
        structuredValue:
          type: string

    NumberField:
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: integer
          enum: [3]
        value:
          type: double
          description: Number value with maximum of 15 significant digits (including decimal digits).
            For longer numbers we recommend storing as a string and parsing the value in your code.
          example: 1234567890.12345

    ProjectUser:
      allOf:
        - $ref: '#/components/schemas/NewProjectUser'
        - required:
            - id
        - properties:
            id:
              type: integer
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    NewProjectUser:
      required:
        - roleId
        - userId
      properties:
        roleId:
          type: number
        userId:
          type: number

    UpdateProjectUser:
      required:
        - roleId
      properties:
        roleId:
          type: number

    Error:
      required:
        - code
        - message
      properties:
        error:
          type: string
        errorType:
          type: string
          description: Optional error type
          enum:
            - undefined
            - ValidationError
            - FieldValueIncorrectTypeError
        errorDetails:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'

    ErrorDetail:
      properties:
        message:
          type: string
        key:
          type: string
